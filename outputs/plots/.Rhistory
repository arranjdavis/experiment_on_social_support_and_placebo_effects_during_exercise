title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
low_plot
dev.off()
getwd()
#plot low words
low_plot = plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
low_plot
dev.off()
#plot low words
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
dev.off()
#plot low words
jpeg("./Desktop/low_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
plot_wc(lows,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
dev.off()
#plot high words
jpeg("./Desktop/high_valence_wc.jpg", height = 6, width = 6, res = 300, units = "in")
high_plot = plot_wc(highs,
order_by='count',
pos=T,
pal=pal2,
title = "",
n_words=50,
family='texture_helv',
scale=c(4,.75))
dev.off()
nrow(dat)
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = 'y ~ x', method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=0,angle=45,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = y ~ x, method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
qplot(data = hourly_sub, datetime_edt, mean_valence) +
geom_vline(xintercept=debate, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hicks_positive, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=positive_test_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=goes_to_hospital, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=visits_supporters, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge_tweet, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_vline(xintercept=hosp_discharge, linetype="dashed", color = "grey", size=.5, alpha = .75) +
geom_label(aes(x = debate, y=5.45, label='Debate'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hicks_positive, y=5.4, label='Aid tests positive'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = positive_test_tweet, y=5.45, label='Positive test'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = goes_to_hospital, y=5.4, label='Goes to hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = visits_supporters, y=5.45, label='Visits supporters'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge_tweet, y=5.45, label='Tweets about discharge'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_label(aes(x = hosp_discharge, y=5.4, label='Discharged from hospital'),hjust=.5,vjust=0,size=2, family='Helvetica', fontface='bold') +
geom_smooth(formula = y ~ x, method = "loess", span = .1, size = .75, color = "black") +
geom_point(aes(size = count*10)) +
scale_size_continuous(label=comma) +
ylim(5.0, 5.5) +
xlim(start,end) +
scale_x_datetime(limits = lims, breaks=breaks, labels=date_format("%b %d \n %I:%M %p", tz = "America/New_York")) +
xlab("Date") + ylab ("Tweet positivity") + labs(size='Tweet count') +
ggtitle("Positivity scores for tweets about President Trump") +
original_theme +
theme(legend.key=element_blank())
30.67 + 211.76 + 30.00
1980 + 1980 + 684
1400/3
1400/30
1400/30/3
15.55556*30
15.55556*20
1400 - 311.11
(1400 - 311.11) / 2 =
(1400 - 311.11) / 2
222.75 + 105-
222.75 + 1050
5!
dbinom(4, size=12, prob=0.2)
dbinom(90, size=10, prob=0.9)
dbinom(90, size=100, prob=0.9)
factorial(3)
factorial(90)
factorial(90)/(factorial(100)*factorial(10))
factorial(100)/(factorial(100)*factorial(10))
factorial(100)/(factorial(90)*factorial(10))
1.731031e+13 * .9^90 *.1^10
factorial(100)/(factorial(100)*factorial(0))
1 * .9^100 * .1^0
factorial(100)/(factorial(91)*factorial(9))
1.902232e+12 * .9^91 *.1^9
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1)
remotes::install_github("jeroen/V8")
install.packages("rstan", type = "source")
install.packages("brms")
library(brms)
install.packages("brms")
iinstall.packages("brms")
install.packages("brms")
remove.packages("emmeans")
library(emmeans)
"
Author: Arran J. Davis
Email: arran.davis@anthro.ox.ac.uk | davis.arran@gmail.com
Affiliation: Social Body Lab, Institute of Cognitive and Evolutionary Anthropology, University of Oxford
Date: 26/01/2021
"
#clean environment
rm(list= ls())
#set current working directory to the one this script is in (when in RStudio)
code_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(code_dir)
#loads the final data set
total_data = read.csv("../data/total_combined_data.csv", sep = ",")
################################################################################################################################################
### REMOVAL OF PARTICIPANTS WHO DID NOT FOLLOW EXPERIMENTAL INSTRUCTIONS ###
#create a list of all participants with data
participants = as.numeric(as.character(unique(total_data$Participant)))
#find participants whose voltage data was not recorded (due to equipment malfunctions)
all_participant_numbers = min(participants):max(participants)
no_volt_participants = all_participant_numbers[!all_participant_numbers %in% participants]
print(paste0("PARTICIPANTS NOT INCLUDED IN ANALYSES DUE TO MISSING HANDGRIP VOLTAGE (STRENGTH) DATA: ", paste( unlist(no_volt_participants), collapse=' '),
" (", length(no_volt_participants), " IN TOTAL)"))
### ### ###
#make the 'Participant' variable a factor
total_data$Participant = as.factor(total_data$Participant)
#a list of participants who were not following the experimental instructions
slacking = c()
#go through all the participants and calculate average percentage of total grip strength for each difficulty level
for (i in participants) {
#subsets data by participant and for each difficulty level
trial_diff_1 = subset(total_data, Participant == i & trial_difficulty == 1)
trial_diff_2 = subset(total_data, Participant == i & trial_difficulty == 2)
trial_diff_3 = subset(total_data, Participant == i & trial_difficulty == 3)
#gets participant i's mean percentage of maximum grip strength for each difficulty level
mean_td1 = mean(trial_diff_1$percent_of_maximum)
mean_td2 = mean(trial_diff_2$percent_of_maximum)
mean_td3 = mean(trial_diff_3$percent_of_maximum)
#identify any participant whose average grip strength does not increase with trial difficulty (indicating they did not try to meet their target grip strengths)
if (mean_td1 < mean_td2 & mean_td2 < mean_td3){
} else {
slacking = append(slacking, i)
}
}
#remove all data from participants who did not follow the experimental instructions to increase grip strength with trial difficulty
slacker_data = total_data[total_data$Participant %in% slacking, ]
total_data = total_data[ ! total_data$Participant %in% slacking, ]
total_data$Participant = droplevels(total_data$Participant)
print(paste0("PARTICIPANTS NOT INCLUDED IN ANALYSES DUE TO NOT FOLLOWING THE EXPERIMENTAL INSTRUCTIONS: ", paste( unlist(slacking), collapse=' '),
" (", length(slacking), " IN TOTAL)"))
#find all participants whose data is not included in analyses
final_participants = unique(total_data$Participant)
not_included = all_participant_numbers[!all_participant_numbers %in% final_participants]
print(paste0("TOTAL PARTICIPANTS NOT INCLUDED IN ANALYSES: ", paste( unlist(not_included), collapse=' '),
" (", length(not_included), " IN TOTAL)"))
################################################################################################################################################
### PARTICIPANT DESCRIPTIVE STATISTICS ###
#get the total number of participants (after exclusions)
length(unique(total_data$Participant))
#get the number of female participants
(table(total_data$sex)[1] / (sum(table(total_data$sex)))) * length(unique(total_data$Participant))
#get the percentage of female participants
table(total_data$sex)[1] / (sum(table(total_data$sex)))
#getdescriptives of participants' age
mean(total_data$age)
sd(total_data$age)
range(total_data$age)
################################################################################################################################################
### DESCRIPTIVES AND TESTS OF POST-EXERCISE QUESTIONS ###
#these analyses need to be run on a data set that has just one row per trial, since each question is answered only once per trial (the first row and the last row will be the same - only the voltage / handgrip data changes)
question_data = subset(total_data, sample_reading_number == 1)
#get one row per participant (this will get the data for the pre- and post-experiment questions)
post_experiment_data = subset(question_data, trial_number == 1 & session_number == 1)
### ### ###
#number of participants who had heard of beta-alanine
table(post_experiment_data$heard_of_beta_alanine)[3]
#percentage of participants who had heard of beta-alanine
(table(post_experiment_data$heard_of_beta_alanine)[3] / sum(table(post_experiment_data$heard_of_beta_alanine))) * 100
### ### ##
#get the mean, sd, and range of responses to the question about whether participants felt that the beta-alanine (i.e., the placebo) significantly improved their performance
mean(post_experiment_data$beta_alanine_performance_effect)
sd(post_experiment_data$beta_alanine_performance_effect)
range(post_experiment_data$beta_alanine_performance_effect)
#one sample t-test to see if scores differ from 0 (make 50 or "no difference" equal 0)
post_experiment_data$beta_alanine_performance_effect = post_experiment_data$beta_alanine_performance_effect - 50
t.test(post_experiment_data$beta_alanine_performance_effect)
### ### ###
#get the mean, sd, and range of of responses to the question about whether participants felt that the beta-alanine (i.e., the placebo) made the exercise trials easier
mean(post_experiment_data$beta_alanine_difficulty_effect)
sd(post_experiment_data$beta_alanine_difficulty_effect)
range(post_experiment_data$beta_alanine_difficulty_effect)
#one sample t-test to see if scores differ from 0 (make 50 or "no difference" equal 0)
post_experiment_data$beta_alanine_difficulty_effect = post_experiment_data$beta_alanine_difficulty_effect - 50
t.test(post_experiment_data$beta_alanine_difficulty_effect)
### ### ###
#get the mean, sd, and range of responses to the question on how close participants felt to their support figure whose photo they saw during the experiment
mean(post_experiment_data$close_to_support_figure_during_exercise)
sd(post_experiment_data$close_to_support_figure_during_exercise)
range(post_experiment_data$close_to_support_figure_during_exercise)
#get the mean, sd, and range of responses to the question on how close participants felt to the stranger whose photo they saw during the experiment
mean(post_experiment_data$close_to_stranger_during_exercise)
sd(post_experiment_data$close_to_stranger_during_exercise)
range(post_experiment_data$close_to_stranger_during_exercise)
#do a Wilcoxon rank-sum test (paired samples, since measures are from the same participant)
wilcox.test(post_experiment_data$close_to_support_figure_during_exercise, post_experiment_data$close_to_stranger_during_exercise, paired = TRUE)
### ### ###
#get the mean, sd, and range of responses to the question about how well participants' support figures met the description of “someone you feel you have a close connection with and that you can depend on in times of need"
mean(post_experiment_data$does_support_figure_match_description)
sd(post_experiment_data$does_support_figure_match_description)
range(post_experiment_data$does_support_figure_match_description)
#count and percentage of participants who answered the question with a 6 or 7 ("Very much")
sum(table(post_experiment_data$does_support_figure_match_description)[c(3,4)])
(sum(table(post_experiment_data$does_support_figure_match_description)[c(3,4)]) / sum(table(post_experiment_data$does_support_figure_match_description))) * 100
#time (in months) participants reported knowing their support figures
mean(post_experiment_data$months_known) / 12
sd(post_experiment_data$months_known) / 12
range(post_experiment_data$months_known) / 12
### ### ###
#mean, sd, and range of scores on social assurance scale
mean(post_experiment_data$SAS)
sd(post_experiment_data$SAS)
range(post_experiment_data$SAS)
#mean, sd, and range of scores on ability to depend upon others measure
mean(post_experiment_data$depend)
sd(post_experiment_data$depend)
range(post_experiment_data$depend)
#mean, sd, and range of scores on neuroticism measure
mean(post_experiment_data$neuroticism)
sd(post_experiment_data$neuroticism)
range(post_experiment_data$neuroticism)
#mean, sd, and range of ratios of felt closeness to support figure v. felt closeness to stranger
post_experiment_data$support.to.stranger.ratio = post_experiment_data$close_to_support_figure_during_exercise / post_experiment_data$close_to_stranger_during_exercise
mean(post_experiment_data$support.to.stranger.ratio)
sd(post_experiment_data$support.to.stranger.ratio)
range(post_experiment_data$support.to.stranger.ratio)
#mean, sd, and range of scores on fear of pain questionnaire
mean(post_experiment_data$fear_of_pain)
sd(post_experiment_data$fear_of_pain)
range(post_experiment_data$fear_of_pain)
################################################################################################################################################
### HANDGRIP STRENGTH, PERCEIVED DIFFICULTY, AND EFFORT MEASURES ###
library(dplyr)
#handgrip strength by trial difficulty for all the participants in the main analyses
group_by(total_data, trial_difficulty) %>% summarise(grip_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by trial difficulty for all the participants removed from the main analyses for not following the experimental instructions
group_by(slacker_data, trial_difficulty) %>% summarise(grip_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by each experimental condition
group_by(total_data, support_or_control, placebo_condition, trial_difficulty) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by social support and placebo condition
group_by(total_data, support_or_control, placebo_condition) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by social support condition
group_by(total_data, support_or_control) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by placebo condition
group_by(total_data, placebo_condition) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by exercise block
group_by(total_data, session_number) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#handgrip strength by exercise block and placebo condition
group_by(total_data, session_number, placebo_condition) %>% summarise(volt_mean = mean(percent_of_maximum, na.rm = TRUE),
grip_sd = sd(percent_of_maximum, na.rm = TRUE))
#percentage of handgrip strength readings greater than 100% of the participant's maximum
high_reading = subset(total_data, percent_of_maximum > 100)
length(unique(high_reading$Participant))
nrow(high_reading)
(nrow(high_reading) / nrow(total_data)) * 100
### ### ###
#perceived difficulty by trial target difficulty
group_by(total_data, trial_difficulty) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
#perceived difficulty by each experimental condition
group_by(total_data, support_or_control, placebo_condition, trial_difficulty) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
#perceived difficulty by social support and placebo condition
group_by(total_data, support_or_control, placebo_condition) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
#perceived difficulty by social support condition
group_by(total_data, support_or_control ) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
#perceived difficulty by social support condition
group_by(total_data, placebo_condition ) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
#perceived difficulty by exercise block
group_by(total_data, session_number ) %>% summarise(diff = mean(Q2_ans_perc, na.rm = TRUE),
sd = sd(Q2_ans_perc, na.rm = TRUE))
### ### ###
#effort by trial target difficulty
group_by(total_data, trial_difficulty) %>% summarise(effort = mean(Q1_ans_perc, na.rm = TRUE))
#effort by exercise block
group_by(total_data, session_number) %>% summarise(effort = mean(Q1_ans_perc, na.rm = TRUE))
### ### ###
#correlation beteen participants' answers to the two questions post-trial questions on perceived difficulty and effort
cor(question_data$Q1_ans_perc, question_data$Q2_ans_perc)
#check question censoring for the two questions
hist(question_data$Q1_ans_perc, main = "", xlab = "Percent of sliding scale (0 = 'no effort at all', 100 = 'maximum effort')", ylim = c(0, 800), breaks = 101, cex=2.5)
hist(question_data$Q2_ans_perc, main = "", xlab = "Percent of sliding scale (0 = 'not hard at all', 100 = 'extremely hard')",  ylim = c(0, 800), breaks = 101)
#get the percentage of answers at the maximum of the sliding scale
nrow(subset(question_data, Q2_ans_perc == 100)) / nrow(question_data) * 100
nrow(subset(question_data, Q1_ans_perc == 100)) / nrow(question_data) * 100
#a function for finding the mode of a vector
getmode = function(v) {
uniqv = unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#get the mode of both answers
getmode(question_data$Q2_ans_perc)
getmode(question_data$Q1_ans_perc)
################################################################################################################################################
### MULTILEVEL MODEL ON PARTICIPANTS' HANDGRIP OUTPUTS ###
library(lme4)
library(lmerTest)
library(optimx)
library(nloptr)
library(dfoptim)
library(RCurl)
library(MuMIn)
library(emmeans)
#this will change the appropriate variables to factors
total_data$placebo_condition = as.factor(total_data$placebo_condition)
total_data$Participant = as.factor(total_data$Participant)
total_data$trial_difficulty.f = as.factor(total_data$trial_difficulty)
#this will change the appropriate variables to integers
total_data$session_number = as.integer(total_data$session_number)
total_data$trial_number = as.integer(total_data$trial_number)
total_data$trial_difficulty = as.integer(total_data$trial_difficulty)
#make the 'trial_difficulty' variable an ordered factor
total_data$trial_difficulty_o = ordered(total_data$trial_difficulty)
################################################################################################################################################
### PLOT THEMES ###
library(ggplot2)
#fonts
quartzFonts(helv  = c('Helvetica-Bold',
'Helvetica-Bold',
'Helvetica-Oblique',
'Helvetica-BoldOblique'))
#theme settings
point_size = 1
header_size = 12
axis_title_size = 12
axis_size = 10
original_theme = theme(text=element_text(size=header_size,family='helv'),
title = element_text(size = header_size),
axis.text.x = element_text(color='black',size=axis_size),
axis.text.y = element_text(color='black',size=axis_size),
axis.title.x = element_text(size = axis_title_size, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = axis_title_size, margin = margin(t = 0, r = 10, b = 0, l = 0)),
panel.background = element_rect(colour = '#FFFFFF',fill='#FFFFFF'),
panel.grid.major = element_line(color = '#e7e7e7'),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(), plot.margin = margin(1, 1, 1, 1, 'cm'))
#colors for trial difficulty (colorblind friendly)
diff_cols_g_y_r = c("#009E73", "#F0E442", "#D55E00")
diff_cols_r_y_g = c("#D55E00", "#F0E442", "#009E73")
#colors for placebo
placebo_cols = c("grey75", "grey25")
### ### ###
#create a directory for the plot, set the current directory to this directory
cur_dir = code_dir
new_dir = paste0('../outputs/plots/')
dir.create(file.path(cur_dir, new_dir))
setwd(new_dir)
################################################################################################################################################
getwd()
################################################################################################################################################
### MEAN HANDGRIP OUTPUTS BY TRIAL TARGET DIFFICULTY AND SOCIAL SUPPORT ###
#create a difference variable (difference between support figure and stranger face by trial difficulty for hand grip outputs)
difference_dat_hang_grip = data.frame(matrix(NA, nrow = 0, ncol = 3))
#create data for each participant
for (p in unique(total_data$Participant)){
#subset the data for each target difficulty
low = total_data[(total_data$Participant == p & total_data$trial_difficulty == 1), ]
med = total_data[(total_data$Participant == p & total_data$trial_difficulty == 2), ]
high = total_data[(total_data$Participant == p & total_data$trial_difficulty == 3), ]
#get the hand grip outputs for each target difficulty
low_support = low[(low$support_or_control == "support"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
low_stranger = low[(low$support_or_control == "control"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
med_support = med[(med$support_or_control == "support"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
med_stranger = med[(med$support_or_control == "control"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
high_support = high[(high$support_or_control == "support"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
high_stranger = high[(high$support_or_control == "control"), ][c("percent_of_maximum", "trial_number", "sample_reading_number", "trial_difficulty")]
#get the differences for each target difficulty (first create empty dataframes)
low_diff = data.frame(matrix(NA, nrow =2240, ncol = 3))
colnames(low_diff) = c("participant", "output_difference", "trial_difficulty")
low_diff$participant = p
low_diff$trial_difficulty = "40%"
low_diff$output_difference = low_support$percent_of_maximum - low_stranger$percent_of_maximum
low_diff$support_percent_maximum = low_support$percent_of_maximum
low_diff$stranger_percent_maximum = low_stranger$percent_of_maximum
low_diff$support_percent_increase = ((low_support$percent_of_maximum - low_stranger$percent_of_maximum) / low_stranger$percent_of_maximum)*100
med_diff = data.frame(matrix(NA, nrow =2240, ncol = 3))
colnames(med_diff) = c("participant", "output_difference", "trial_difficulty")
med_diff$participant = p
med_diff$trial_difficulty = "50%"
med_diff$output_difference = med_support$percent_of_maximum - med_stranger$percent_of_maximum
med_diff$support_percent_maximum = med_support$percent_of_maximum
med_diff$stranger_percent_maximum = med_stranger$percent_of_maximum
med_diff$support_percent_increase = ((med_support$percent_of_maximum - med_stranger$percent_of_maximum) / med_stranger$percent_of_maximum)*100
med_diff
high_diff = data.frame(matrix(NA, nrow =2240, ncol = 3))
colnames(high_diff) = c("participant", "output_difference", "trial_difficulty")
high_diff$participant = p
high_diff$trial_difficulty = "60%"
high_diff$output_difference = high_support$percent_of_maximum - high_stranger$percent_of_maximum
high_diff$support_percent_maximum = high_support$percent_of_maximum
high_diff$stranger_percent_maximum = high_stranger$percent_of_maximum
high_diff$support_percent_increase = ((high_support$percent_of_maximum - high_stranger$percent_of_maximum) / high_stranger$percent_of_maximum)*100
#add to the total data frame
difference_dat_hang_grip = rbind(difference_dat_hang_grip, low_diff)
difference_dat_hang_grip = rbind(difference_dat_hang_grip, med_diff)
difference_dat_hang_grip = rbind(difference_dat_hang_grip, high_diff)
}
#get the average distance for each participant
average_dat_outputs = difference_dat_hang_grip %>% group_by(participant, trial_difficulty) %>% summarise(mean_diff = mean(output_difference))
ggplot(average_dat_outputs, aes(x=trial_difficulty, y=mean_diff)) +
geom_violin(aes(fill = trial_difficulty)) +
geom_boxplot(width = 0.1) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(limits = c(-7,10), breaks = c(-5, 0, 5, 10), labels = c("-5%", "0%\n(no effect)", "+5%", "+10%")) +
xlab("Trial target difficulty\n(percentage of participant's maximum handgrip strength)") +
ylab("Mean effect of support figure face (versus stranger face) on handgrip outputs") +
coord_flip() +
scale_fill_manual(values = diff_cols_g_y_r) +
theme(legend.position="none") +
original_theme
### ### ###
#plot the data
avp_outputs = ggplot(average_dat_outputs, aes(x=trial_difficulty, y=mean_diff)) +
geom_violin(aes(fill = trial_difficulty)) +
geom_boxplot(width = 0.1) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_y_continuous(limits = c(-7,10), breaks = c(-5, 0, 5, 10), labels = c("-5%", "0%\n(no effect)", "+5%", "+10%")) +
xlab("Trial target difficulty\n(percentage of participant's maximum handgrip strength)") +
ylab("Mean effect of support figure face (versus stranger face) on handgrip outputs") +
coord_flip() +
scale_fill_manual(values = diff_cols_g_y_r) +
theme(legend.position="none") +
original_theme
#save the plot
ggsave("average_social_support_effect_by_trial_difficulty_target.jpg", avp_outputs, width = 10, height = 7.5)
